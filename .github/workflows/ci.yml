name: CI (pull → build → unit_test → package → publish → e2e)

on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: 277014978722
  ECR_REPOSITORY: entrytracker
  IMAGE_URI: 277014978722.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest
  APP_FILE: app.py            # אם קובץ הכניסה שונה — עדכני
  APP_PORT: "5000"           # הפורט שבו האפליקציה רצה ב-standalone
  HEALTH_PATH: "/"           # אם יש /health — עדכני
  E2E_URL: "http://localhost/" # ה-Nginx שלך חושף 80:80

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions: { contents: read }

    steps:
    # ---------- pull ----------
    - name: Pull source
      uses: actions/checkout@v4

    # ---------- build (standalone, no Docker) ----------
    - name: Setup Python
      uses: actions/setup-python@v5
      with: { python-version: "3.11" }

    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # ---------- unit_test (run & curl) ----------
    - name: Run app in background
      run: |
        nohup python "${APP_FILE}" > app.log 2>&1 &
        echo $! > app.pid
        for i in {1..25}; do
          if curl -fsS "http://127.0.0.1:${APP_PORT}${HEALTH_PATH}" >/dev/null; then
            echo "App is up"; break; fi
          sleep 2
        done
        curl -v "http://127.0.0.1:${APP_PORT}${HEALTH_PATH}"

    - name: Stop app
      if: always()
      run: |
        [ -f app.pid ] && kill $(cat app.pid) 2>/dev/null || true
        [ -f app.log ] && tail -n +200 app.log || true

    # ---------- package (docker build) ----------
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker build (no push)
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: false
        tags: ${{ env.IMAGE_URI }}

    # ---------- publish (push to ECR) ----------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push image to ECR (latest + sha)
      run: |
        IMAGE_BASE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
        docker tag "${IMAGE_URI}" "${IMAGE_BASE}:latest"
        docker tag "${IMAGE_URI}" "${IMAGE_BASE}:${GITHUB_SHA::7}"
        docker push "${IMAGE_BASE}:latest"
        docker push "${IMAGE_BASE}:${GITHUB_SHA::7}"

    # ---------- e2e (compose up + curl) ----------
    - name: Prepare .env for docker-compose
      run: |
        cat > .env <<EOF
        DB_HOST=mysql
        DB_USER=appuser
        DB_PASSWORD=strong-pass
        DB_NAME=app_db
        DB_ROOT_PASSWORD=root-pass
        EOF

    - name: Compose up (detached)
      run: |
        docker compose up -d
        for i in {1..30}; do
          if curl -fsS "${E2E_URL}" >/dev/null; then echo "E2E is up"; break; fi
          sleep 3
        done
        curl -v "${E2E_URL}"

    - name: Compose logs on failure
      if: failure()
      run: docker compose logs --no-color

    - name: Compose down
      if: always()
      run: docker compose down -v