name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write   # דרוש ל-OIDC
  contents: read

jobs:
  pull:
    runs-on: ubuntu-latest
    outputs:
      src_sha: ${{ steps.meta.outputs.src_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fail if merge-conflict markers exist
        run: |
          if git grep -nE '^[<=>]{7}'; then
            echo "Resolve merge conflicts before running CI."
            exit 1
          fi

      - name: Stamp source SHA
        id: meta
        run: echo "src_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Pack source (git archive)
        run: |
          git config --global --add safe.directory "$PWD"
          git archive --format=tar.gz -o /tmp/src.tar.gz HEAD

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: /tmp/src.tar.gz

      - name: Report (pull)
        if: always()
        run: |
          echo "### ✅ pull passed" >> "$GITHUB_STEP_SUMMARY"

  build:
    runs-on: ubuntu-latest
    needs: pull
    env:
      IMAGE_NAME: entrytracker
      IMAGE_TAG: latest
    steps:
      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: src
          path: ./ci_src

      - name: Extract source
        run: |
          tar -xzf ./ci_src/src.tar.gz -C .
          ls -la

      - name: Docker build (latest)
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Save built image as artifact (tar)
        run: docker save $IMAGE_NAME:$IMAGE_TAG -o image_latest.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image_latest
          path: image_latest.tar

      - name: Report (build)
        if: always()
        run: |
          echo "### ✅ build passed" >> "$GITHUB_STEP_SUMMARY"

  unit_test:
    runs-on: ubuntu-latest
    needs: pull
    steps:
      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: src
          path: ./ci_src

      - name: Extract source
        run: tar -xzf ./ci_src/src.tar.gz -C .

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps (app + pytest)
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run app standalone (background)
        run: |
          nohup python app.py > app.log 2>&1 & echo $! > app.pid

      - name: Wait for app on :5000
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:5000/ >/dev/null; then
              echo "Standalone app is up"; exit 0; fi
            echo "Waiting for app... ($i)"; sleep 2
          done
          echo "App did not start in time" && exit 1

      - name: Pytest
        run: pytest -q

      - name: Stop standalone app
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi

      - name: Report (unit_test)
        if: always()
        run: |
          echo "### ✅ unit_test passed" >> "$GITHUB_STEP_SUMMARY"

  package:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download image artifact (for traceability)
        uses: actions/download-artifact@v4
        with:
          name: image_latest
          path: ./img

      - name: List packaged image
        run: |
          ls -lh ./img
          echo "Package stage complete (image_latest.tar)"

      - name: Report (package)
        if: always()
        run: |
          echo "### ✅ package passed" >> "$GITHUB_STEP_SUMMARY"

  e2e:
    runs-on: ubuntu-latest
    needs: [pull, build, unit_test, package]
    steps:
      - name: Download source
        uses: actions/download-artifact@v4
        with:
          name: src
          path: ./ci_src

      - name: Extract source
        run: tar -xzf ./ci_src/src.tar.gz -C .

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: image_latest
          path: ./img

      - name: Load local image
        run: docker load -i ./img/image_latest.tar

      - name: "Sanity: ensure local tag exists"
        run: docker images | grep -E '^entrytracker\s+latest' || (echo "entrytracker:latest not loaded" && exit 1)

      - name: Pull public base images (nginx/mysql)
        run: |
          docker pull nginx:1.27-alpine
          docker pull mysql:5.7

      - name: Create compose override for CI
        run: |
          cat > docker-compose.ci.override.yml <<'YML'
          services:
            web:
              image: entrytracker:latest
          YML
          echo "---- docker-compose.ci.override.yml ----"
          cat docker-compose.ci.override.yml

      - name: Compose up (no build, with override)
        env:
          ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
             docker compose -f docker-compose.yml -f docker-compose.ci.override.yml up -d
    

      - name: Wait for web via Nginx (HTTP 200)
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost/ >/dev/null; then
              echo "Web is up through Nginx"; exit 0; fi
            echo "Waiting for Nginx/web... ($i)"; sleep 3
          done
          echo "Service not responding in time" && exit 1

      - name: Basic E2E curl
        run: curl -i http://localhost/ | head -n 1

      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml down -v

      - name: Collect compose logs
        if: always()
        run: |
          mkdir -p reports
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml ps > reports/compose.ps.txt || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color > reports/compose.log || true

      - name: Upload reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          path: reports/

      - name: Report (e2e)
        if: always()
        run: |
          echo "### ✅ e2e finished (see ci-reports artifact)" >> "$GITHUB_STEP_SUMMARY"


  publish:
    runs-on: ubuntu-latest
    needs: [e2e]   # נדחף רק אחרי שהאימג' נבנה ונבדק
    env:
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}   # entrytracker אצלך
      IMAGE_TAG: latest
      AWS_REGION: ${{ vars.AWS_REGION }}           # ap-south-1 אצלך
    steps:
      - name: Download built image artifact
        uses: actions/download-artifact@v4
        with:
          name: image_latest
          path: ./img

      - name: Load image
        run: docker load -i ./img/image_latest.tar

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag image for ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag entrytracker:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Will push: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Show published image URI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: echo "PUBLISHED_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Report (publish)
        if: always()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "### ✅ publish pushed $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_STEP_SUMMARY"

