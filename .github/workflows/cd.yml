name: CD (staging)

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

env:
  AWS_REGION:       ${{ vars.AWS_REGION }}        # למשל: ap-south-1
  AWS_ACCOUNT_ID:   ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY:   ${{ vars.ECR_REPOSITORY }}    # למשל: entrytracker

jobs:
  deploy_staging:
    # רץ ידנית, או אוטומטית רק אם ה-CI הצליח ועל main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    concurrency: cd-staging

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.STAGING_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Prepare target dir on EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} \
            'sudo mkdir -p /opt/entrytracker/nginx && sudo chown -R $USER:$USER /opt/entrytracker'

      # שימי לב: שם הקובץ הוא docker-compose.yml
      - name: Rsync compose & nginx to EC2 (no .env)
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            --delete \
            docker-compose.yml nginx/ ${USER}@${HOST}:/opt/entrytracker/

      - name: Deploy via SSH (pull & replace)
        env:
          HOST: ${{ secrets.STAGING_HOST }}    # DNS/IP של ה-EC2
          USER: ${{ secrets.STAGING_USER }}    # ubuntu וכד'
        run: |
          # כאן ה-heredoc לא מצוטט, כדי שה-ENV מה-Workflow יוזרקו לתוך הסשן בשרת
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} <<EOF
          set -euo pipefail
          cd /opt/entrytracker

          # מקבלים את הערכים מה-Workflow ENV (כבר הוזרקו ע"י GitHub לפני השליחה)
          AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
          AWS_REGION="${AWS_REGION}"
          ECR_REPOSITORY="${ECR_REPOSITORY}"
          REGISTRY="\${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_REGION}.amazonaws.com"
          export AWS_DEFAULT_REGION="\${AWS_REGION}"

          echo "Using REGISTRY=\${REGISTRY}"
          echo "Repository=\${ECR_REPOSITORY}"

          # Login to ECR (נדרש IAM Role מתאים ל-EC2 או קרדנצ'יאלס תקינים על השרת)
          aws ecr get-login-password --region "\${AWS_REGION}" \
            | sudo docker login --username AWS --password-stdin "\${REGISTRY}"

          # מושכים את השירותים ומחליפים, כולל ניקוי יתומים
          sudo docker compose pull
          sudo docker compose up -d --remove-orphans

          # ניקוי שכבות לא בשימוש (אופציונלי)
          sudo docker image prune -f || true

          # בדיקת בריאות דרך Nginx על פורט 80
          for i in {1..20}; do
            if curl -fsS http://localhost/ >/dev/null; then
              echo "Deployed OK"
              exit 0
            fi
            echo "Waiting for app... (\$i)"
            sleep 3
          done
          echo "Health check failed" >&2
          exit 1
          EOF