name: CD (staging)

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

env:
  AWS_REGION:       ${{ vars.AWS_REGION }}        # למשל: ap-south-1
  AWS_ACCOUNT_ID:   ${{ vars.ACCOUNT_ID }}
  ECR_REPOSITORY:   ${{ vars.ECR_REPOSITORY }}    # למשל: entrytracker

jobs:
  deploy_staging:
    # רץ ידנית, או אוטומטית רק אם CI הצליח ועל main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    concurrency: cd-staging

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.STAGING_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Prepare target dir on EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} \
            'sudo mkdir -p /opt/entrytracker/nginx && sudo chown -R $USER:$USER /opt/entrytracker'

      # מעתיקים את docker-compose.yml בדיוק כפי ששמו ברפו
      - name: Rsync compose to EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          test -f docker-compose.yml || { echo "❌ docker-compose.yml missing"; exit 1; }
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            docker-compose.yml ${USER}@${HOST}:/opt/entrytracker/

      # מעתיקים תמיד את nginx/ כולל nginx.conf למקום הנכון
      - name: Rsync nginx/ to EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          test -f nginx/nginx.conf || { echo "❌ nginx/nginx.conf missing in repo"; exit 1; }
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            nginx/ ${USER}@${HOST}:/opt/entrytracker/nginx/

      - name: Deploy via SSH (pull & replace)
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} <<EOF
          set -euo pipefail
          cd /opt/entrytracker

          # ENV מה-Variables שלך; אם חסר Account ID נגזור מה-STS
          AWS_REGION="\${AWS_REGION:-${AWS_REGION:-ap-south-1}}"
          AWS_ACCOUNT_ID="\${AWS_ACCOUNT_ID:-${AWS_ACCOUNT_ID:-}}"
          if [ -z "\$AWS_ACCOUNT_ID" ]; then
            AWS_ACCOUNT_ID="\$(aws sts get-caller-identity --query Account --output text)"
          fi
          ECR_REPOSITORY="\${ECR_REPOSITORY:-${ECR_REPOSITORY:-entrytracker}}"
          REGISTRY="\${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_REGION}.amazonaws.com"
          export AWS_DEFAULT_REGION="\$AWS_REGION"

          echo "Using ACCOUNT_ID=\$AWS_ACCOUNT_ID REGION=\$AWS_REGION"
          echo "Using REGISTRY=\$REGISTRY / REPO=\$ECR_REPOSITORY"

          # בדיקות קיום קבצים לפני ההרמה
          [ -f /opt/entrytracker/docker-compose.yml ] || { echo "❌ missing docker-compose.yml"; exit 1; }
          [ -f /opt/entrytracker/nginx/nginx.conf ]   || { echo "❌ missing nginx/nginx.conf"; exit 1; }

          # Login ל-ECR
          aws ecr get-login-password --region "\$AWS_REGION" \
            | sudo docker login --username AWS --password-stdin "\$REGISTRY"

          # Pull & replace
          sudo docker compose -f docker-compose.yml pull
          sudo docker compose -f docker-compose.yml up -d --remove-orphans

          # ניקוי (לא חובה)
          sudo docker image prune -f || true

          # ── Health check יציב: מודדים קוד HTTP, לא מפילים על 502 רגעי ──
          set +e
          ok=1
          for i in {1..30}; do
            code=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost/)
            if [ "\$code" = "200" ]; then
              echo "Deployed OK (HTTP 200)"
              ok=0
              break
            fi
            echo "Waiting for app... (\$i) HTTP=\$code"
            sleep 3
          done
          set -e
          exit \$ok
          EOF
