name: CD (staging)

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

env:
  AWS_REGION:       ${{ vars.AWS_REGION }}        # למשל: ap-south-1
  AWS_ACCOUNT_ID:   ${{ vars.ACCOUNT_ID }}
  ECR_REPOSITORY:   ${{ vars.ECR_REPOSITORY }}    # למשל: entrytracker
  IMAGE_TAG: ${{ needs.pull.outputs.src_sha }}
jobs:
  deploy_staging:
    # רץ ידנית, או אוטומטית רק אם CI הצליח ועל main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    concurrency: cd-staging

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.STAGING_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Prepare target dir on EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} \
            'sudo mkdir -p /opt/entrytracker/nginx && sudo chown -R $USER:$USER /opt/entrytracker'

      # מעתיקים את compose וה-Nginx מהריפו (סיומת yml אצלך)
      - name: Rsync compose to EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          test -f docker-compose.yml || { echo "❌ docker-compose.yml missing"; exit 1; }
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            docker-compose.yml ${USER}@${HOST}:/opt/entrytracker/

      - name: Rsync nginx/ to EC2
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          test -f nginx/nginx.conf || { echo "❌ nginx/nginx.conf missing in repo"; exit 1; }
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            nginx/ ${USER}@${HOST}:/opt/entrytracker/nginx/

      # ─────────── Deploy: login to ECR → compose pull/up (בלי .env כרגע) ───────────
      - name: Deploy via SSH (pull, env from S3, up)
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
          S3_ENV_PATH: s3://entry-tracker-task-dicd-s3/.env
          AWS_ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}           # שימי לב לשם שה-compose מצפה לו
          AWS_REGION:     ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG:      ${{ needs.pull.outputs.src_sha }}  # תג דינאמי (למשל SHA)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} \
            "AWS_REGION='${{ env.AWS_REGION }}' AWS_ACCOUNT_ID='${{ env.AWS_ACCOUNT_ID }}' ECR_REPOSITORY='${{ env.ECR_REPOSITORY }}' S3_ENV_PATH='${S3_ENV_PATH}' bash -s" <<'EOF'
          set -euo pipefail
          cd /opt/entrytracker

          REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          export AWS_DEFAULT_REGION="${AWS_REGION}"

          echo "Downloading .env from S3: ${S3_ENV_PATH}"
          aws s3 cp "${S3_ENV_PATH}" /opt/entrytracker/.env --region "${AWS_REGION}"
          chmod 600 /opt/entrytracker/.env
          echo ".env ready at /opt/entrytracker/.env"

          echo "Login to ECR: ${REGISTRY}"
          aws ecr get-login-password --region "${AWS_REGION}" \
            | sudo docker login --username AWS --password-stdin "${REGISTRY}"

          echo "Compose pull/up with --env-file"
          sudo docker compose --env-file /opt/entrytracker/.env -f docker-compose.yml pull
          sudo docker compose --env-file /opt/entrytracker/.env -f docker-compose.yml up -d --remove-orphans

          sudo docker image prune -f || true
          EOF


      # ─────────── Health-check נפרד כדי לשלוט נכון ב-exit code ───────────
      - name: Remote Health Check (wait for HTTP 200)
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          for i in $(seq 1 30); do
            code=$(ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} "curl -s -o /dev/null -w '%{http_code}' http://localhost/")
            if [ "$code" = "200" ]; then
              echo "Deployed OK (HTTP 200)"
              exit 0
            fi
            echo "Waiting for app... ($i) HTTP=$code"
            sleep 3
          done
          echo "Health check failed (no HTTP 200 after retries)"
          # דיבוג קצר:
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} "cd /opt/entrytracker && sudo docker compose -f docker-compose.yml ps && sudo docker compose -f docker-compose.yml logs --no-color | tail -n 200" || true
          exit 1